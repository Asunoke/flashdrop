// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  posts    Post[]
  orders   Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  MANAGER
  ADMIN
}

model Post {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  excerpt     String?
  image       String?
  published   Boolean  @default(false)
  views       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String?
  author      User?     @relation(fields: [authorId], references: [id], onDelete: SetNull)
  category    String?
  tags        String[]
  readingTime Int?
}

model Product {
  id              String      @id @default(cuid())
  name            String
  description     String
  longDescription String?     @db.Text
  price           Float
  originalPrice   Float?
  category        String
  stockQuantity   Int
  inStock         Boolean     @default(true)
  images          String[]
  features        String[]
  warranty        String?
  delivery        String?
  installation    Boolean     @default(false)
  isNew           Boolean     @default(false)
  isPromo         Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  orderItems      OrderItem[]
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  total           Float
  status          OrderStatus @default(PENDING)
  customerName    String
  customerEmail   String
  customerPhone   String
  customerAddress String
  paymentRef      String?
  rejectionReason String?
  expiresAt       DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  items           OrderItem[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}




enum OrderStatus {
  PENDING
  CONFIRMED
  REJECTED
  DELIVERED
  CANCELLED
}
